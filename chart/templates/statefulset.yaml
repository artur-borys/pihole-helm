apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "pihole.fullname" . }}
  labels:
    {{- include "pihole.labels" . | nindent 4 }}
spec:
  serviceName: {{ .Values.serviceName }}
  selector:
    matchLabels:
      {{- include "pihole.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- if .Values.keepAdlistsInSync }}
        checksum/adlists: {{ include (print $.Template.BasePath "/adlists.yaml") . | sha256sum }}
        {{- end }}
        {{- if .Values.restartOnEnvironmentChange }}
        checksum/environment: {{ include (print $.Template.BasePath "/env.yaml") . | sha256sum }}
        {{- end }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "pihole.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "pihole.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        - name: webpassword
          secret:
            secretName: {{ include "pihole.webpasswordSecretName" . }}
        - name: adlists
          configMap:
            name: {{ include "pihole.fullname" . }}-adlists
      {{- if .Values.keepAdlistsInSync }}
      initContainers:
        - name: "update-adlist"
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/bash
            - -c
            - |-
              GRAVITY_DB=/etc/pihole/gravity.db
              if [ ! -f "${GRAVITY_DB}" ];
              then
                echo "gravity.db file not present - exiting"
                exit 0
              fi

              echo "gravity.db exists - making sure it's up to date with ConfigMap"
              sqlite3 "${GRAVITY_DB}" "select address from adlist" > /tmp/adlist

              comm -13 <(sort /adlists.list) <(sort /tmp/adlist) > /tmp/to_delete
              
              mapfile -t to_delete </tmp/to_delete
              
              for n in "${to_delete[@]}";
              do
                echo "Removing $n from gravity.db as it's not present in ConfigMap"
                sqlite3 "${GRAVITY_DB}" "delete from adlist where address='$n'"
              done

              mapfile -t to_insert <./adlists.list

              for l in "${to_insert[@]}";
              do
                if ! sqlite3 "${GRAVITY_DB}" "insert into adlist (address) values('$l')";
                then
                  echo "Address $l already present in gravity"
                else
                  echo "Address $l successfully inserted"
                fi;
              done;
          volumeMounts:
            - name: {{ include "pihole.fullname" . }}-etc-pihole
              mountPath: /etc/pihole
            - name: adlists
              mountPath: /adlists.list
              subPath: adlists.list
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: WEBPASSWORD_FILE
              value: /opt/secrets/webpassword
            - name: TIMEZONE
              value: {{ .Values.timezone }}
            - name: PIHOLE_DNS_
              value: {{ .Values.upstreamDNS | join ";" }}
          envFrom:
            - configMapRef:
                name: {{ include "pihole.fullname" . }}-env
          volumeMounts:
            - name: {{ include "pihole.fullname" . }}-etc-pihole
              mountPath: /etc/pihole
            - name: {{ include "pihole.fullname" . }}-etc-dnsmasqd
              mountPath: /etc/dnsmasq.d
            - name: webpassword
              mountPath: /opt/secrets/
              readOnly: true
            - name: adlists
              mountPath: /etc/pihole/adlists.list
              subPath: adlists.list
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
              {{ if .Values.httpOnHost.enabled }}
              hostIP: {{ .Values.httpOnHost.hostIP }}
              hostPort: {{ .Values.httpOnHost.hostPort }}
              {{ end }}
            - name: dns-tcp
              containerPort: 53
              protocol: TCP
              {{ if .Values.dnsTcpOnHost.enabled }}
              hostIP: {{ .Values.dnsTcpOnHost.hostIP }}
              hostPort: {{ .Values.dnsTcpOnHost.hostPort }}
              {{ end }}
            - name: dns-udp
              containerPort: 53
              protocol: UDP
              {{ if .Values.dnsUdpOnHost.enabled }}
              hostIP: {{ .Values.dnsUdpOnHost.hostIP }}
              hostPort: {{ .Values.dnsUdpOnHost.hostPort }}
              {{ end }}
          livenessProbe:
            httpGet:
              path: /admin
              port: http
          readinessProbe:
            httpGet:
              path: /admin
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: {{ include "pihole.fullname" . }}-etc-pihole
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: {{ .Values.pvc.etc_pihole.storageClassName }}
        resources:
          requests:
            storage: {{ .Values.pvc.etc_pihole.size }}
    - metadata:
        name: {{ include "pihole.fullname" . }}-etc-dnsmasqd
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: {{ .Values.pvc.etc_dnsmasqd.storageClassName }}
        resources:
          requests:
            storage: {{ .Values.pvc.etc_dnsmasqd.size }}
